<!-- Control_Custom_Button.razor -->

<button @attributes="ButtonAttributes" @onclick="CustomButton_onclick">
    @if (IsDisabled)
    {
        <svg class="svg-inline--fa fa-circle-notch fa-w-16 animate-autospin h-6 w-6 mr-3 text-white group-hover:text-gray-900" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="circle-notch" role="img" viewBox="0 0 512 512">
            <path fill="currentColor" d="M288 39.056v16.659c0 10.804 7.281 20.159 17.686 23.066C383.204 100.434 440 171.518 440 256c0 101.689-82.295 184-184 184-101.689 0-184-82.295-184-184 0-84.47 56.786-155.564 134.312-177.219C216.719 75.874 224 66.517 224 55.712V39.064c0-15.709-14.834-27.153-30.046-23.234C86.603 43.482 7.394 141.206 8.003 257.332c.72 137.052 111.477 246.956 248.531 246.667C393.255 503.711 504 392.788 504 256c0-115.633-79.14-212.779-186.211-240.236C302.678 11.889 288 23.456 288 39.056z" />
        </svg>
        @ButtonText
    }
    else
    {
        @ButtonText
    }
</button>

@code {

    #region "Private Variables"

    private bool IsDisabled { get; set; } = false;

    #endregion

    #region "Public Properties"

    public enum HTML_ButtonType
    {
        button,
        submit,
        reset,
    }

    #endregion

    #region "Public Parameters"

    [Parameter]
    public HTML_ButtonType ButtonType { get; set; } = HTML_ButtonType.button;

    [Parameter]
    public string ButtonName { get; set; }

    [Parameter]
    public bool IsAutoFocus { get; set; } = false;

    [Parameter]
    public string ButtonText { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    #endregion

    #region "Constructors"

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    #endregion

    #region "Dictionary"

    private Dictionary<string, object> ButtonAttributes => new Dictionary<string, object>
    {
        {"name", ButtonName},
        {"type", ButtonType},
        {"aria-label", ButtonText},
        {"autofocus", IsAutoFocus},
        {"disabled", IsDisabled},
        {"class", "group flex justify-center text-base font-semibold tracking-wider transition duration-150 ease-in-out rounded-md bg-gray-700 border-2 border-gray-700 text-white py-2 px-8 hover:bg-white hover:text-gray-700"}
    };

    #endregion

    #region "Private Functions\Methods"

    private async Task CustomButton_onclick()
    {
        if (!IsDisabled)
        {
            IsDisabled = true;

            try
            {
                await OnClick.InvokeAsync();
            }
            finally
            {
                IsDisabled = false;
            }
        }
    }

    #endregion   

}